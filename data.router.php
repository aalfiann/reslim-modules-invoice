<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\invoice\Data as Data;                              //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request  
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side


    // POST api to add new
    $app->post('/invoice/data/new', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        
        $d->username = $datapost['Username'];
        $d->token = $datapost['Token'];

        $d->from_name = $datapost['From_name'];
        $d->from_name_company = $datapost['From_name_company'];
        $d->from_address = $datapost['From_address'];
        $d->from_phone = $datapost['From_phone'];
        $d->from_fax = $datapost['From_fax'];
        $d->from_email = $datapost['From_email'];
        $d->from_website = $datapost['From_website'];

        $d->to_name = $datapost['To_name'];
        $d->to_name_company = $datapost['To_name_company'];
        $d->to_address = $datapost['To_address'];
        $d->to_phone = $datapost['To_phone'];
        $d->to_fax = $datapost['To_fax'];
        $d->to_email = $datapost['To_email'];
        $d->to_website = $datapost['To_website'];

        $d->custom_id = $datapost['Custom_id'];
        $d->custom_field = $datapost['Custom_field'];
        $d->data_table = $datapost['Data_table'];

        $d->total_sub = $datapost['Total_sub'];
        $d->total = $datapost['Total'];
        $d->term = $datapost['Term'];
        $d->signature = $datapost['Signature'];

        $d->prefix = (empty($datapost['Prefix'])?'INV':$datapost['Prefix']);
        $d->sequence = (empty($datapost['Sequence'])?false:(($datapost['Sequence'] == 'true')?true:false));
        $d->countzero = (empty($datapost['Countzero'])?4:preg_replace("/[^0-9]/", "", $datapost['Countzero']));

        $body = $response->getBody();
        $body->write($d->create());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Custom_id','0-1000'))
        ->add(new ValidateParam('Custom_field','0-10000','json'))
        ->add(new ValidateParam(['From_email','To_email'],'0-50','email'))
        ->add(new ValidateParam(['From_name_company','To_name_company'],'0-50'))
        ->add(new ValidateParam(['From_website','To_website'],'0-50','domain'))
        ->add(new ValidateParam(['From_fax','To_fax'],'0-15','numeric'))
        ->add(new ValidateParam(['From_phone','To_phone'],'1-15','numeric'))
        ->add(new ValidateParam(['Total_sub','Total'],'1-20','decimal'))
        ->add(new ValidateParam('Term','1-3','numeric'))
        ->add(new ValidateParam('Data_table','1-100000','json'))
        ->add(new ValidateParam(['Token','From_address','To_address'],'1-250','required'))
        ->add(new ValidateParam(['Username','From_name','To_name','Signature'],'1-50','required'));

    // POST api to update
    $app->post('/invoice/data/update', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        
        $d->username = $datapost['Username'];
        $d->token = $datapost['Token'];

        $d->from_name = $datapost['From_name'];
        $d->from_name_company = $datapost['From_name_company'];
        $d->from_address = $datapost['From_address'];
        $d->from_phone = $datapost['From_phone'];
        $d->from_fax = $datapost['From_fax'];
        $d->from_email = $datapost['From_email'];
        $d->from_website = $datapost['From_website'];

        $d->to_name = $datapost['To_name'];
        $d->to_name_company = $datapost['To_name_company'];
        $d->to_address = $datapost['To_address'];
        $d->to_phone = $datapost['To_phone'];
        $d->to_fax = $datapost['To_fax'];
        $d->to_email = $datapost['To_email'];
        $d->to_website = $datapost['To_website'];

        $d->custom_id = $datapost['Custom_id'];
        $d->custom_field = $datapost['Custom_field'];
        $d->data_table = $datapost['Data_table'];

        $d->total_sub = $datapost['Total_sub'];
        $d->total = $datapost['Total'];
        $d->term = $datapost['Term'];
        $d->signature = $datapost['Signature'];

        $d->invoiceid = $datapost['InvoiceID'];
        $d->statusid = $datapost['StatusID'];

        $body = $response->getBody();
        $body->write($d->update());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Custom_id','0-1000'))
        ->add(new ValidateParam('Custom_field','0-10000','json'))
        ->add(new ValidateParam(['From_email','To_email'],'0-50','email'))
        ->add(new ValidateParam(['From_name_company','To_name_company'],'0-50'))
        ->add(new ValidateParam(['From_website','To_website'],'0-50','domain'))
        ->add(new ValidateParam(['From_fax','To_fax'],'0-15','numeric'))
        ->add(new ValidateParam(['From_phone','To_phone'],'1-15','numeric'))
        ->add(new ValidateParam(['Total_sub','Total'],'1-20','decimal'))
        ->add(new ValidateParam('Term','1-3','numeric'))
        ->add(new ValidateParam('Data_table','1-100000','json'))
        ->add(new ValidateParam('StatusID','1-11','numeric'))
        ->add(new ValidateParam('InvoiceID','1-20','alphanumeric'))
        ->add(new ValidateParam(['Token','From_address','To_address'],'1-250','required'))
        ->add(new ValidateParam(['Username','From_name','To_name','Signature'],'1-50','required'));

    // POST api to delete
    $app->post('/invoice/data/delete', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        
        $d->username = $datapost['Username'];
        $d->token = $datapost['Token'];
        $d->invoiceid = $datapost['InvoiceID'];

        $body = $response->getBody();
        $body->write($d->delete());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('InvoiceID','1-20','alphanumeric'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // POST api to set status
    $app->post('/invoice/data/set/status', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        
        $d->username = $datapost['Username'];
        $d->token = $datapost['Token'];
        $d->invoiceid = $datapost['InvoiceID'];
        
        switch(strtolower($datapost['Status'])){
            case 'canceled':
                $d->statusid = '7';
                break;
            case 'paid':
                $d->statusid = '34';
                break;
            case 'pending':
                $d->statusid = '35';
                break;
            case 'rejected':
                $d->statusid = '37';
                break;
            default:
                $d->statusid = '35';
        }

        $body = $response->getBody();
        $body->write($d->setStatus());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Status','1-50','alphabet'))
        ->add(new ValidateParam('InvoiceID','1-20','alphanumeric'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // GET api to show all data (index) with pagination
    $app->get('/invoice/data/index/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $d->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $d->username = $request->getAttribute('username');
        $d->token = $request->getAttribute('token');
        $d->page = $request->getAttribute('page');
        $d->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($d->index());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'));

    // GET api to show all data (index) with pagination
    $app->get('/invoice/data/index/keywords/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $d->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $d->firstdate = filter_var((empty($_GET['firstdate'])?'':$_GET['firstdate']),FILTER_SANITIZE_STRING);
        $d->lastdate = filter_var((empty($_GET['lastdate'])?'':$_GET['lastdate']),FILTER_SANITIZE_STRING);
        $d->custom_id = (empty($_GET['keywords'])?'':$_GET['keywords']);
        $d->username = $request->getAttribute('username');
        $d->token = $request->getAttribute('token');
        $d->page = $request->getAttribute('page');
        $d->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($d->indexKey());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'))->add(new ValidateParamURL('keywords','0-500'));

    // GET api to read single data
    $app->get('/invoice/data/read/{invoiceid}/{username}/{token}', function (Request $request, Response $response) {
        $d = new Data($this->db);
        $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $d->username = $request->getAttribute('username');
        $d->token = $request->getAttribute('token');
        $d->invoiceid = $request->getAttribute('invoiceid');
        $body = $response->getBody();
        $body->write($d->read());
        return classes\Cors::modify($response,$body,200);
    });
    // GET api to read single data for public user (include cache)
    $app->map(['GET','OPTIONS'],'/invoice/data/read/{id}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $d = new Data($this->db);
            $d->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $d->invoiceid = $request->getAttribute('id');
            $datajson = SimpleCache::save($d->readPublic(),["apikey","lang"],null,300);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))->add(new ApiKey);

    $app->get('/invoice/test/custom', function(Request $request,Response $response) {
        $d = new Data($this->db);
        $body = $response->getBody();
        $body->write('{"result":"'.$d->queryGenerateID('invoice_data','InvoiceID').'"}');
        return classes\Cors::modify($response,$body,200);
    });